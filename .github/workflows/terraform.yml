# Main workflow for Terraform Plan and Apply operations

name: 'Terraform Plan/Apply'

on:
    workflow_dispatch:
        inputs:
          environment:
            description: 'Environment to deploy to. Choose from dev, test, or prod.'
            required: true
            type: choice
            options:
              - testing
              - development
              - production

permissions:
  id-token: write   # Required for OIDC token generation (Azure login)
  contents: read      # Enable read access to repository contents
  pull-requests: write  # Allows updating pull requests if needed

env:
  # Environment variables for Azure authentication using secure secrets
  ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
  ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
  ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"

jobs:
  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Azure CLI Login
      # Login to Azure using provided credentials for subsequent Terraform commands.
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Print Environment Variables
      # Debug: Output Azure-related environment variables to validate configuration.
      run: printenv | grep ARM_

    - name: Setup Terraform
      # Install and configure Terraform CLI for deployment tasks.
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_wrapper: false

    - name: Terraform Init
      # Initialize Terraform with backend configuration pointing to the selected environment state.
      run: terraform init -backend-config=key=environments/${{ github.event.inputs.environment }}.tfstate

    - name: Terraform Format
      # Verify Terraform files are properly formatted.
      run: terraform fmt -check

    - name: Terraform Plan
      id: tf-plan
      # Execute Terraform plan to preview infrastructure changes.
      run: |
        export exitcode=0
        terraform plan -var-file=environments/${{ github.event.inputs.environment }}.tfvars -detailed-exitcode -no-color -out tfplan || export exitcode=$?
        terraform show -no-color tfplan > tfplan.txt
        echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
        if [ $exitcode -eq 1 ]; then
          echo Terraform Plan Failed!
          exit 1
        else 
          exit 0
        fi
        
    - name: Publish Terraform Plan
      # Publish generated Terraform plan artifacts for later consumption.
      uses: actions/upload-artifact@v4
      with:
        name: tfplan
        path: |
          tfplan
          tfplan.txt
        
    - name: Create String Output
      id: tf-plan-string
      # Create a GitHub Actions output variable containing a formatted Terraform plan summary.
      run: |
        TERRAFORM_PLAN=$(terraform show -no-color tfplan)
        delimiter="$(openssl rand -hex 8)"
        echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
        echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
        echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo '```terraform' >> $GITHUB_OUTPUT
        echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
        echo '```' >> $GITHUB_OUTPUT
        echo "</details>" >> $GITHUB_OUTPUT
        echo "${delimiter}" >> $GITHUB_OUTPUT
        
    - name: Publish Terraform Plan to Task Summary
      # Append the plan summary to the GitHub Actions task summary for easy review.
      env:
        SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
      run: |
        echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY
      
                
  terraform-apply:
    name: 'Terraform Apply'
    # Only run apply if on main branch and if the plan step indicates changes (exit code 2).
    if: github.ref == 'refs/heads/main' && needs.terraform-plan.outputs.tfplanExitCode == 2
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    needs: [terraform-plan]
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Azure CLI Login
      # Login to Azure before applying the Terraform plan.
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        # Detailed: Ensures secure access to Azure with the stored credentials.

    - name: Print Environment Variables
      # Debug: Confirm Azure specific environment variables are present.
      run: printenv | grep ARM_

    - name: Setup Terraform
      # Setup Terraform for applying the infrastructure changes.
      uses: hashicorp/setup-terraform@v3

    - name: Terraform Init
      # Re-initialize Terraform to ensure backend configuration consistency.
      run: terraform init -backend-config=key=environments/${{ github.event.inputs.environment }}.tfstate

    - name: Download Terraform Plan
      # Retrieve the Terraform plan artifact created during the plan job.
      uses: actions/download-artifact@v4
      with:
        name: tfplan

    - name: Terraform Apply
      # Apply the Terraform plan to enact the changes.
      run: terraform apply -var-file=environments/${{ github.event.inputs.environment }}.tfvars -auto-approve tfplan