name: 'Terraform CI/CD'

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - dev
          - test
          - prod

env:
  # Azure Provider Authentication
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  # Backend Configuration
  TF_BACKEND_RESOURCE_GROUP: "terraformRG"
  TF_BACKEND_STORAGE_ACCOUNT: "terraformstoraccsasi"
  TF_BACKEND_CONTAINER: "terraformsccontainer"
  TF_BACKEND_KEY: "${{ github.event.inputs.environment }}.tfstate"

permissions:
  contents: read
  pull-requests: write

jobs:
  validate:
    name: 'Validate'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Azure CLI Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="resource_group_name=$TF_BACKEND_RESOURCE_GROUP" \
            -backend-config="storage_account_name=$TF_BACKEND_STORAGE_ACCOUNT" \
            -backend-config="container_name=$TF_BACKEND_CONTAINER" \
            -backend-config="key=$TF_BACKEND_KEY"

      - name: Terraform Validate
        run: terraform validate

  plan:
    name: 'Plan'
    needs: validate
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Azure CLI Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="resource_group_name=$TF_BACKEND_RESOURCE_GROUP" \
            -backend-config="storage_account_name=$TF_BACKEND_STORAGE_ACCOUNT" \
            -backend-config="container_name=$TF_BACKEND_CONTAINER" \
            -backend-config="key=$TF_BACKEND_KEY"

      - name: Terraform Plan
        run: terraform plan -var-file="environments/${{ github.event.inputs.environment }}.tfvars" -out=tfplan-${{ github.event.inputs.environment }}
        
      - name: Upload Plan
        uses: actions/upload-artifact@v3
        with:
          name: tfplan-${{ github.event.inputs.environment }}
          path: tfplan-${{ github.event.inputs.environment }}

  apply:
    name: 'Apply'
    needs: plan
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Azure CLI Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="resource_group_name=$TF_BACKEND_RESOURCE_GROUP" \
            -backend-config="storage_account_name=$TF_BACKEND_STORAGE_ACCOUNT" \
            -backend-config="container_name=$TF_BACKEND_CONTAINER" \
            -backend-config="key=$TF_BACKEND_KEY"

      - name: Download Plan
        uses: actions/download-artifact@v3
        with:
          name: tfplan-${{ github.event.inputs.environment }}

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan-${{ github.event.inputs.environment }}

  destroy:
    name: 'Destroy'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Azure CLI Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="resource_group_name=$TF_BACKEND_RESOURCE_GROUP" \
            -backend-config="storage_account_name=$TF_BACKEND_STORAGE_ACCOUNT" \
            -backend-config="container_name=$TF_BACKEND_CONTAINER" \
            -backend-config="key=$TF_BACKEND_KEY"

      - name: Terraform Destroy
        run: terraform destroy -var-file="environments/${{ github.event.inputs.environment }}.tfvars" -auto-approve
